ADAPTER (structural)
Adapter pattern works as a bridge between two incompatible interfaces.

BRIDGE (structural)
Bridge is used when we need to decouple an abstraction from its implementation so that the two
can vary independently.

CHAIN OF RESPONSIBILITY (behavioral)
In this pattern, normally each receiver contains reference to another receiver. If one object
cannot handle the request then it passes the same to the next receiver and so on.

COMMAND (behavioral)
A request is wrapped under an object as command and passed to invoker object. Invoker object
looks for the appropriate object which can handle this command and passes the command to the
corresponding object which executes the command.

COMPOSITE (structural)
This pattern creates a class that contains group of its own objects. This class provides ways
to modify its group of same objects.

DECORATOR (structural)
Decorator pattern allows a user to add new functionality to an existing object without altering
its structure.

FACADE (structural)
Facade pattern hides the complexities of the system and provides an interface to the client
using which the client can access the system.

FILTER (structural)
Facade pattern hides the complexities of the system and provides an interface to the client
using which the client can access the system.

FLYWEIGHT (structural)
Flyweight pattern is primarily used to reduce the number of objects created and to decrease
memory footprint and increase performance.

INTERPRETER (behavioral)
Interpreter pattern provides a way to evaluate language grammar or expression.

ITERATOR (behavioral)
This pattern is used to get a way to access the elements of a collection object in sequential
manner without any need to know its underlying representation.

MEDIATOR (behavioral)
Mediator pattern is used to reduce communication complexity between multiple objects or classes.

MEMENTO (behavioral)
Memento pattern is used to restore state of an object to a previous state.

OBSERVER (behavioral)
Observer pattern is used when there is one-to-many relationship between objects such as if one
object is modified, its dependent objects are to be notified automatically.


--------------
STATE (behavioral)
In State pattern, we create objects which represent various states and a context object whose
behavior varies as its state object changes.

NULL OBJECT (behavioral)
In Null Object pattern, a null object replaces check of NULL object instance. Instead of putting
if check for a null value, Null Object reflects a do nothing relationship.

STRATEGY (behavioral)
In Strategy pattern, a class behavior or its algorithm can be changed at run time.

TEMPLATE (behavioral)
In Template pattern, an abstract class exposes defined way(s)/template(s) to execute its methods.
Its subclasses can override the method implementation as per need but the invocation is to be in
the same way as defined by an abstract class.

VISITOR (behavioral)
In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class.
By this way, execution algorithm of element can vary as and when visitor varies.